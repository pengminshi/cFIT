install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
#############
# ip and excitatory neurons
#############
library(Seurat)
devtools::install_github("iaconogi/bigSCale2")
install.pacakge(BioQC)
install.pacakges('BioQC')
install.packages('BioQC')
devtools::install_github("iaconogi/bigSCale2", dependencies = T)
BiocManager::install("BioQC")
getwd()
library('nCov2019')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'zh')
library('remotes')
remotes::install_github("GuangchuangYu/nCov2019", dependencies = TRUE)
library('nCov2019')
x <- get_nCov2019(lang = 'en')
x
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'zh')
rm(list=ls())
library('nCov2019')
x <- get_nCov2019(lang = 'zh')
x <- get_nCov2019(lang = 'en')
x <- get_nCov2019(lang = 'en')
confirmed = d3.csv(
"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"
)
import { data } from "@fil/ncov2019-data"
x <- get_nCov2019(lang = 'en')
str(x)
plot(dat$confirm)
dat = x$chinaDayList
plot(dat$confirm)
source('Dropbox/research/mypackages/rpp/rpp.R')
rep(1:3,1:3)
case.time = rep(1:length(dat$confirm),dat$confirm)
fit = fitRPP(case.time)
names(x)
str(x)
x <- get_nCov2019(lang = 'en')
str(x)
names(x)
dat = read.csv('Desktop/corvid19/us_covid19_daily.csv')
str(dat)
counts = dat$total
time = rep(1:length(counts), counts)
fit = fitRPP(time)
time = rep(1:length(counts), counts)*365
fit = fitRPP(time)
tmp = c('a','b','c','a')
factor(tmp)
factor(tmp,levels=c('a','b','c'))
factor(tmp,levels=c('b','c','a'))
help(nodepie)
??nodepie
getwd()
mylist = c(1,2,3)
myfuc = function(l){
l = c(l,4)
}
myfuc(mylist)
mylist
library(xlsx)
Sys.getenv('JAVA')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/openjdk-14.0.1.jdk/Contents/Home')
library(xlsx)
Sys.getenv('JAVA')
(12/13)^13
6/13
x = 1:10/10
y = 1:10
lm(y~x)
fit = lm(y~x)
summary(fit)
n = 200
alpha = 1
nv = rnorm(n)
nx = rnorm(n)
ny = rnorm(n)
nz = rnorm(n)
nw = rnorm(n)
v = nv
x = 2*v + nx
y = -x + ny
z = alpha* x + nz
w = -2*v+3*y+5*z+nw
hist(w)
n = 200
alpha = 2
nv = rnorm(n)
nx = rnorm(n)
ny = rnorm(n)
nz = rnorm(n)
nw = rnorm(n)
v = nv
x = 2*v + nx
y = -x + ny
z = alpha* x + nz
w = -2*v+3*y+5*z+nw
hist(w)
plot(x, y)
qplot(x, y)
library(ggplot2)
qplot(x, y)
qplot(x, y) + labs(x='X', y='W')
n = 200
alpha = 2
nv = rnorm(n)
nx = rnorm(n)
ny = rnorm(n)
nz = rnorm(n)
nw = rnorm(n)
v = nv
x = 2*v + nx
y = -x + ny
z = 1 #alpha* x + nz
w = -2*v+3*y+5*z+nw
library(ggplot2)
qplot(x, y) + labs(x='X', y='W')
hist(z
)
ls
getwd()
setwd('Dropbox/research/cFIT/cFIT/')
devtools::load_all('')
devtools::load_all('.')
# compare runing time with increasing n
n.list=c(5000, 10000, 50000, 100000)
subsample.prop.list = c(1, 0.5, 0.1, 0.01)
ntask = 5
p = 500
r = 10
runtime.mat = matrix(NA, length(n.list), length(subsample.prop.list))
obj.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
deltaw.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
set.seed(42)
for (j in 1:length(subsample.prop.list)){
for (i in 1:length(n.list)){
n = n.list[i]
subsample.prop = subsample.prop.list[j]
message('Run experiment with seed:', seed,', n=',n,', subsample.prop=',subsample.prop,'...')
data.out = generate_data(n=n, p=p, ntask=ntask, K=r, cl.sep=1, sig=2, batch.effect.sig=0.5, alpha=1)
start.time = Sys.time()
int.out = CFITIntegrate_sketched(X.list=data.out$X.list, r=r, verbose=T, subsample.prop=subsample.prop,
tol=1e-5, seed=42, max.niter=50, n.cores = 4)
end.time = Sys.time()
time = difftime(end.time, start.time,units = 'm')
message('Finish, repeat ', rep, ', run ', int.out$niter,' iters in time:', time,'.')
runtime.mat[i, j] = time
obj.mat[i,j] = int.out$obj
deltaw.mat[i,j] = int.out$deltaw
}
}
saveRDS(list(runtime.mat=runtime.mat, obj.mat=obj.mat, deltaw.mat=deltaw.mat,
n.list=n.list, subsample.prop.list=subsample.prop.list, p=p, ntask=ntask, r=r), 'simu_sketch_01.rds')
# compare runing time with increasing n
n.list=c(5000, 10000, 50000, 100000)
subsample.prop.list = c(1, 0.5, 0.1, 0.01)
ntask = 5
p = 500
r = 10
runtime.mat = matrix(NA, length(n.list), length(subsample.prop.list))
obj.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
deltaw.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
set.seed(42)
for (j in 1:length(subsample.prop.list)){
for (i in 1:length(n.list)){
n = n.list[i]
subsample.prop = subsample.prop.list[j]
message('Run experiment with n=',n,', subsample.prop=',subsample.prop,'...')
data.out = generate_data(n=n, p=p, ntask=ntask, K=r, cl.sep=1, sig=2, batch.effect.sig=0.5, alpha=1)
start.time = Sys.time()
int.out = CFITIntegrate_sketched(X.list=data.out$X.list, r=r, verbose=T, subsample.prop=subsample.prop,
tol=1e-5, seed=42, max.niter=50, n.cores = 4)
end.time = Sys.time()
time = difftime(end.time, start.time,units = 'm')
message('Finish, repeat ', rep, ', run ', int.out$niter,' iters in time:', time,'.')
runtime.mat[i, j] = time
obj.mat[i,j] = int.out$obj
deltaw.mat[i,j] = int.out$deltaw
}
}
saveRDS(list(runtime.mat=runtime.mat, obj.mat=obj.mat, deltaw.mat=deltaw.mat,
n.list=n.list, subsample.prop.list=subsample.prop.list, p=p, ntask=ntask, r=r), 'simu_sketch_01.rds')
str(int.out)
runtime.mat[i, j] = time
runtime.mat
obj.mat
obj.mat[i,j] = int.out$obj
time = difftime(end.time, start.time,units = 'm')
message('Finish, repeat ', rep, ', run ', int.out$niter,' iters in time:', time,'.')
# compare runing time with increasing n
n.list=c(5000, 10000, 50000, 100000)
subsample.prop.list = c(1, 0.5, 0.1, 0.01)
ntask = 5
p = 500
r = 10
runtime.mat = matrix(NA, length(n.list), length(subsample.prop.list))
obj.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
deltaw.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
set.seed(42)
for (j in 1:length(subsample.prop.list)){
for (i in 1:length(n.list)){
n = n.list[i]
subsample.prop = subsample.prop.list[j]
message('Run experiment with n=',n,', subsample.prop=',subsample.prop,'...')
data.out = generate_data(n=n, p=p, ntask=ntask, K=r, cl.sep=1, sig=2, batch.effect.sig=0.5, alpha=1)
start.time = Sys.time()
int.out = CFITIntegrate_sketched(X.list=data.out$X.list, r=r, verbose=T, subsample.prop=subsample.prop,
tol=1e-5, seed=42, max.niter=50, n.cores = 4)
end.time = Sys.time()
time = difftime(end.time, start.time,units = 'm')
message('Finish, run ', int.out$niter,' iters in time:', time,'.')
runtime.mat[i, j] = time
obj.mat[i,j] = int.out$obj
deltaw.mat[i,j] = int.out$deltaw
}
}
saveRDS(list(runtime.mat=runtime.mat, obj.mat=obj.mat, deltaw.mat=deltaw.mat,
n.list=n.list, subsample.prop.list=subsample.prop.list, p=p, ntask=ntask, r=r), 'simu_sketch_01.rds')
rm(ls = list())
rm(list = ls())
tmp = list()
tmp = c(tmp, list(list(a=1)))
tmp
tmp = c(tmp, list(list(a=1)))
tmp
tmp = c(tmp, list(list(a=1, b=1:10)))
tmp
set.seed(42)
data.out = generate_data(n=200, p=500, ntask=5, K=6, cl.sep=1, sig=2, batch.effect.sig=0.5, alpha=1)
labels = as.character(do.call(c, data.out$label.list))
batchs = as.character(rep(1:length(data.out$X.list), each=length(data.out$label.list[[1]])))
int.out = CFITIntegrate_sketched(X.list=data.out$X.list, subsample.prop=0.1,r=6, verbose=T, tol=1e-5, seed=42, max.niter=50, n.cores = 4)
str(int.out)
# compare runing time with increasing n
n.list=c(5000, 10000, 50000)
subsample.prop.list = c(1, 0.5, 0.1, 0.01)
ntask = 5
p = 500
r = 10
runtime.mat = matrix(NA, length(n.list), length(subsample.prop.list))
obj.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
deltaw.mat = matrix(NA, length(n.list),  length(subsample.prop.list))
info.list = list()
set.seed(42)
for (i in 1:length(n.list)){
n = n.list[i]
message('Run experiment with n=',n)
data.out = generate_data(n=n, p=p, ntask=ntask, K=r, cl.sep=1, sig=2, batch.effect.sig=0.5, alpha=1)
for (j in 1:length(subsample.prop.list)){
subsample.prop = subsample.prop.list[j]
message('subsample.prop=',subsample.prop,'...')
start.time = Sys.time()
int.out = CFITIntegrate_sketched(X.list=data.out$X.list, r=r, verbose=T, subsample.prop=subsample.prop,
tol=1e-5, seed=42, max.niter=50, n.cores = 4)
end.time = Sys.time()
time = difftime(end.time, start.time,units = 'm')
message('Finish, run ', int.out$niter,' iters in time:', time,'.')
runtime.mat[i, j] = time
obj.mat[i,j] = int.out$obj
deltaw.mat[i,j] = int.out$deltaw
info.list = c(info.list,list(list(n = n, subsample.prop=subsample.prop, deltaw.history=int.out$deltaw.history)))
}
}
saveRDS(list(runtime.mat=runtime.mat, obj.mat=obj.mat, deltaw.mat=deltaw.mat, info.list=info.list,
n.list=n.list, subsample.prop.list=subsample.prop.list, p=p, ntask=ntask, r=r), 'simu_sketch_02.rds')
runtime.mat
obj.mat
deltaw.mat
help(assert_true)
testTRUE(TRUE)
library("devtools")
devtools::install_github("pengminshi/cFIT")
packageVersion("BiocStyle")
update.packages("BiocStyle")
packageVersion("BiocStyle")
remove.packages("BiocStyle")
install.packages("BiocStyle")
install.packages("BiocStyle")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
packageVersion("BiocStyle")
packageVersion("Bioconductor")
.libPaths()
install.packages('Bioconductor')
packageVersion("BiocStyle")
R --version
version
devtools::document()
